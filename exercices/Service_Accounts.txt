Q:
--
How many Service Accounts exist in the default namespace ?


A:
--
Run the command kubectl get serviceaccounts and count the number of accounts.


controlplane ~ ➜  kubectl get serviceaccounts

NAME      SECRETS   AGE
default   0         6m57s
dev       0         39s


===============================================================================================================================

Q:
--
What is the secret token used by the default service account ?


A:
--
Run the command kubectl describe serviceaccount default and look at the Tokens field.


controlplane ~ ➜  kubectl describe serviceaccount default
Name:                default
Namespace:           default
Labels:              <none>
Annotations:         <none>
Image pull secrets:  <none>
Mountable secrets:   <none>
Tokens:              <none>
Events:              <none>


===============================================================================================================================

Q:
--
We just deployed the Dashboard application. Inspect the deployment. What is the image used by the deployment ?


A:
--
Run the command kubectl describe deployment


controlplane ~ ➜  kubectl describe deployment
Name:                   web-dashboard
Namespace:              default
CreationTimestamp:      Tue, 28 Mar 2023 11:50:23 +0000
Labels:                 <none>
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               name=web-dashboard
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  name=web-dashboard
  Containers:
   web-dashboard:
    Image:      gcr.io/kodekloud/customimage/my-kubernetes-dashboard
    Port:       8080/TCP
    Host Port:  0/TCP
    Environment:
      PYTHONUNBUFFERED:  1
    Mounts:              <none>
  Volumes:               <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   web-dashboard-65b9cf6cbb (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  25s   deployment-controller  Scaled up replica set web-dashboard-65b9cf6cbb to 1


===============================================================================================================================

Q:
--
What type of account does the Dashboard application use to query the Kubernetes API ?


A:
--
As evident from the error in the web-dashboard UI, the pod makes use of a service account to query the Kubernetes API.

```
pods is forbidden: User "system:serviceaccount:default:default" cannot list resource "pods" in API group "" in the namespace "default"
```
  

===============================================================================================================================

Q:
--
Which account does the Dashboard application use to query the Kubernetes API ?


A:
--
Again, the name of the Service Account is displayed in the error message on the dashboard. 
The deployment makes use of the default service account which we inspected earlier.

```
pods is forbidden: User "system:serviceaccount:default:default" cannot list resource "pods" in API group "" in the namespace "default"
```


===============================================================================================================================

Q:
--
Inspect the Dashboard Application POD and identify the Service Account mounted on it.


A:
--
Run the command kubectl get po -o yaml and inspect serviceAccount.


controlplane ~ ✖ kubectl get pods
NAME                             READY   STATUS    RESTARTS   AGE
web-dashboard-65b9cf6cbb-59dxh   1/1     Running   0          2m54s

controlplane ~ ➜  kubectl describe pod web-dashboard-65b9cf6cbb-59dxh
Name:             web-dashboard-65b9cf6cbb-59dxh
Namespace:        default
Priority:         0
Service Account:  default
...


===============================================================================================================================

Q:
--
At what location is the ServiceAccount credentials available within the pod ?


A:
--
Run the command kubectl describe pod and look for volume mount path.


/var/run/secrets



controlplane ~ ✖ kubectl get pods
NAME                             READY   STATUS    RESTARTS   AGE
web-dashboard-65b9cf6cbb-59dxh   1/1     Running   0          2m54s

controlplane ~ ➜  kubectl describe pod web-dashboard-65b9cf6cbb-59dxh
Name:             web-dashboard-65b9cf6cbb-59dxh
Namespace:        default
Priority:         0
Service Account:  default
Node:             controlplane/172.25.0.30
Start Time:       Tue, 28 Mar 2023 11:50:23 +0000
Labels:           name=web-dashboard
                  pod-template-hash=65b9cf6cbb
Annotations:      <none>
Status:           Running
IP:               10.42.0.9
IPs:
  IP:           10.42.0.9
Controlled By:  ReplicaSet/web-dashboard-65b9cf6cbb
Containers:
  web-dashboard:
    Container ID:   containerd://d6366521a7262c7ea8a9a4a03688c46f0bc7415a33eeba0faf205807232f0516
    Image:          gcr.io/kodekloud/customimage/my-kubernetes-dashboard
    Image ID:       gcr.io/kodekloud/customimage/my-kubernetes-dashboard@sha256:7d70abe342b13ff1c4242dc83271ad73e4eedb04e2be0dd30ae7ac8852193069
    Port:           8080/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Tue, 28 Mar 2023 11:50:30 +0000
    Ready:          True
    Restart Count:  0
    Environment:
      PYTHONUNBUFFERED:  1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-hbr2z (ro)
...
Volumes:
  kube-api-access-hbr2z:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
...


===============================================================================================================================

Q:
--
The application needs a ServiceAccount with the Right permissions to be created to authenticate to Kubernetes. 
The default ServiceAccount has limited access. Create a new ServiceAccount named dashboard-sa.


Service Account Name: dashboard-sa


A:
--
Run the command kubectl create serviceaccount dashboard-sa

controlplane ~ ➜  kubectl create serviceaccount dashboard-sa
serviceaccount/dashboard-sa created


===============================================================================================================================
===============================================================================================================================
===============================================================================================================================
===============================================================================================================================

We just added additional permissions for the newly created dashboard-sa account using RBAC.

If you are interested checkout the files used to configure RBAC at /var/rbac. We will discuss RBAC in a separate section.


controlplane ~ ➜  cat /var/rbac/dashboard-sa-role-binding.yaml 
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: ServiceAccount
  name: dashboard-sa # Name is case sensitive
  namespace: default
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io


controlplane ~ ➜  cat /var/rbac/pod-reader-role.yaml 
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get
  - watch
  - list


===============================================================================================================================
===============================================================================================================================
===============================================================================================================================
===============================================================================================================================  


Enter the access token in the UI of the dashboard application. Click Load Dashboard button to load Dashboard


Create an authorization token for the newly created service account, copy the generated token and paste it into the token field of the UI.

To do this, run kubectl create token dashboard-sa for the dashboard-sa service account, copy the token and paste it in the UI.


controlplane ~ ➜  kubectl create token dashboard-sa
eyJhbGciOiJSUzI1NiIsImtpZCI6Inp5STUzc1BDREpUVlRPS2Fsc04wVHpYWF91UHpRampxUE03N3UtUTNpQ28ifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiLCJrM3MiXSwiZXhwIjoxNjgwMDA5NDg5LCJpYXQiOjE2ODAwMDU4ODksImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0Iiwic2VydmljZWFjY291bnQiOnsibmFtZSI6ImRhc2hib2FyZC1zYSIsInVpZCI6IjRhMjU5NTA3LTdkZmMtNGUzYy04MzQ2LTFiOThhODlmZTNkNCJ9fSwibmJmIjoxNjgwMDA1ODg5LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6ZGVmYXVsdDpkYXNoYm9hcmQtc2EifQ.IZA2voFYonlMpv-Tz2FCXBGp3UZdLXXkkGQ38OgfwjReNDYLr73aHopral8L-yraQ-uc5_c5dEkMPFOozlspif5QZBaN9uLM5b6J9YoK5f3ssLmnDbwjFljsCctJbOjVAK7CzwBXYXNv5VnqapYggrsZ6bd7UX6SzHRckmOjz-Z2DYuW3Zk_oDYutxuLZSVudiLO2qDmKbFrKsY5Y-yMWEyRiMckYlOOC-HvoEQS8T6SgpCBKhn1dpEcajD4P_6AaAnD525xIqnX0khj37-CASSt7h5AeX04Cr_ghlxeXHh6yvq_bRTNbeESGHBTGqjbnL5NchPoMuQ24is_0A3vUg


===============================================================================================================================
===============================================================================================================================
===============================================================================================================================
===============================================================================================================================

Q:
--
You shouldn't have to copy and paste the token each time. The Dashboard application is programmed to read token from the secret mount location. 
However currently, the default service account is mounted. Update the deployment to use the newly created ServiceAccount

Edit the deployment to change ServiceAccount from default to dashboard-sa.


Deployment name: web-dashboard
Service Account: dashboard-sa
Deployment Ready


A:
--
Use the kubectl edit command for the deployment and specify the serviceAccountName field inside the pod spec.

OR

Make use of the kubectl set command. Run the following command to use the newly created service account: - kubectl set serviceaccount deploy/web-dashboard dashboard-sa



```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-dashboard
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      name: web-dashboard
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: web-dashboard
    spec:
      serviceAccountName: dashboard-sa
      containers:
      - image: gcr.io/kodekloud/customimage/my-kubernetes-dashboard
        imagePullPolicy: Always
        name: web-dashboard
        ports:
        - containerPort: 8080
          protocol: TCP
```

controlplane ~ ➜  kubectl apply -f sample.yaml

Warning: resource deployments/web-dashboard is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
deployment.apps/web-dashboard configured




Refresh the Dashboard application UI and you should now see the PODs listed automatically.

This time you shouldn't have to put in the token manually.