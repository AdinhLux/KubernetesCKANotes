Q:
--
What is the command used to run the pod ubuntu-sleeper?


A:
--

$ kubectl describe pod

```
...
Containers:
  ubuntu:
    Container ID:  containerd://f6a4cf5b8bc13b39be9e8a4b17b8d5a8a45cdd5f7f9909222d5668610ec29536
    Image:         ubuntu
    Image ID:      docker.io/library/ubuntu@sha256:2adf22367284330af9f832ffefb717c78239f6251d9d0f58de50b86229ed1427
    Port:          <none>
    Host Port:     <none>
    Command:
      sleep
      4800
    State:          Running
      Started:      Fri, 03 Mar 2023 07:53:20 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-4gxd4 (ro)
Conditions:
...
```


===============================================================================================================================
Q:
--
Create a pod with the ubuntu image to run a container to sleep for 5000 seconds. 
Modify the file ubuntu-sleeper-2.yaml.


A:
--
$ vi ubuntu-sleeper-2.yaml

```
apiVersion: v1     
kind: Pod 
metadata:
  name: ubuntu-sleeper-2
spec:
  containers:
  - name: ubuntu
    image: ubuntu
    command: 
      - "sleep"
      - "5000"
```


===============================================================================================================================
Q:
--
Create a pod with the given specifications. By default it displays a blue background. Set the given command line arguments to change it to green.

Pod Name: webapp-green
Image: kodekloud/webapp-color
Command line arguments: --color=green


A:
--

1) Create the file with the imperative command without creating the POD
   Edit the file
   Create the pod

$ kubectl run webapp-green --image=kodekloud/webapp-color --dry-run=client -o yaml > webapp-green-pod.yaml
$ vi webapp-green-pod.yaml

```
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: webapp-green
  name: webapp-green
spec:
  containers:
  - image: kodekloud/webapp-color
    name: webapp-green
    args: ["--color","green"]
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
```

$ kubectl create -f webapp-green-pod.yaml


2) Or in single command line

## $ kubectl run webapp-green --image=kodekloud/webapp-color --command -- python app2.py --color green   ===>   if we want to override the Docker ENTRYPOINT with "python app2.py"
$ kubectl run webapp-green --image=kodekloud/webapp-color -- --color green   ===>  if we want to just add the "args" parameter in our POD definition