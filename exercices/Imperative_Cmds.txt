Q:
--
Deploy a redis pod using the redis:alpine image with the labels set to tier=db.

Either use imperative commands to create the pod with the labels. Or else use imperative commands to generate the pod definition file, then add the labels before creating the pod using the file.


Pod Name: redis
Image: redis:alpine
Labels: tier=db


A:
--

1)  $ kubectl run redis --image=redis:alpine --dry-run=client -oyaml > redis-pod.yaml
	$ EDIT redis-pod.yaml
	
2) kubectl run redis -l tier=db --image=redis:alpine


===============================================================================================================================

Q:
--
Create a service redis-service to expose the redis application within the cluster on port 6379.

Use imperative commands.


Service: redis-service
Port: 6379
Type: ClusterIP


A:
--

1)  $ kubectl expose pod redis --port=6379 --name redis-service


===============================================================================================================================

Q:
--
Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas.

Try to use imperative commands only. Do not create definition files.


Name: webapp
Image: kodekloud/webapp-color
Replicas: 3


A:
--

1)  $ kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3


===============================================================================================================================

Q:
--
Create a new pod called custom-nginx using the nginx image and expose it on container port 8080.


A:
--

1)  $ kubectl run custom-nginx --image=nginx --port=8080


===============================================================================================================================

Q:
--
Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.


'redis-deploy' created in the 'dev-ns' namespace?
replicas: 2


A:
--

1)  $ kubectl create deployment redis-deploy --image=redis --replicas=2 -n dev-ns


===============================================================================================================================

Q:
--
Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP by the same name (httpd). The target port for the service should be 80.


'httpd' pod created with the correct image?
'httpd' service is of type 'ClusterIP'?
'httpd' service uses correct target port 80?
'httpd' service exposes the 'httpd' pod?


A:
--

1)  $ kubectl run httpd --image=httpd:alpine --port=80 --expose
